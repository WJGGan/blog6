draft: false
author: "wjg"
authorLink: "https://dillonzq.com"
description: "信息系统分析与设计MIS重点"
tags: ["考研"]
categories: ["知识"]
images: []
resources:
- name: "featured-image"
  src: "featured-image.jpg"
enableEmoji: true

toc:
  auto: false
twemoji: false
lightgallery: true
---

# 第一章 信息系统的基本概念

## 1.1 信息的定义和分类

信息是既可以传输和处理的数据和知识，又是管理和决策的重要依据。

- **要点**：客观性、系统性、开放性

- **性质**：相对性、转移性（空间：通信/传输；时间：存储）、变换性（不同的载体、方法）、有序性（编码等）、动态性、时效性（响应速度）、共享性、两面性。

## 1.2 系统的概念与系统思想

系统是内部互相依赖的各个部分，按照某种规则，为实现某一特定目标而联系在一起的合理的有序的组合。

- **系统特性**：系统边界、输入和输出、输入到输出的转换方法、系统接口

- **系统属性**：目的性、整体性、层次性、相关性、开放性、稳定性、相似性

**系统工程**：以系统的观点和方法为基础，综合的应用各种技术，分析解决复杂而困难的问题的工程方法。

**系统分析的方法论**：

1. 定义问题

2. 列出资源和约束

3. 给出方案

4. 评估、选择方案，并实施

5. 总结解决方案的有效性

## 1.3 信息系统的涵义与相关会议

信息系统是一个以人为主导，吸取经验和遵照规律并重，利用适合的信息技术以及相应设备，根据相应的业务模型和数学模型，进行信息的收集、传输、加工、存储、更新和维护，以提高组织的效益和效率为目的，支持组织的高层决策、中层控制、基层运作的集成化人机系统。

**信息系统的非技术因素**：

1. 人的影响：开发者、使用者、领导等

2. 企业流程再造：业务流程优化等

3. 咨询、监理、审计

4. 投资与评价

5. 软系统思想

6. 知识转移等

## 1.4 信息系统的结构和作用

**信息系统的概念结构**：信息源、信息处理器、信息用户、信息管理者（CIO）

**信息系统的层次结构**：

- 战略决策层（DSS、EIS、SIS）

- 战术管理层（ERP、SAM、CIM）

- 业务处理层（交易处理系统等）

**信息系统的功能结构**：

信息系统【信息的输入，信息的处理（储存等），信息的输出】

**信息系统的物理结构**：

- 集中式：信息高度集中；效率低，维护困难，已淘汰

- 分布-集中式：数据部分集中，便于管理，可相互传递信息共享数据；因有小型机，价格高，维护困难

- 分布式：实现不同地点的资源共享（主要特征），安全可靠性较高，开发维护较为容易

**信息系统的作用**：

- 有助于企业适应知识经济时代的要求

- 有助于企业适应经济全球化的需要

- 有助于企业适应日趋激烈的竞争需要

**信息技术学科相关学术会议**：

- 信息系统协会（AIS）

- 信息系统国际会议（ICIS）

- 亚太信息系统年会（PACIS）

# 第二章 信息系统的基本关系

## 2.1 信息系统与管理决策的关系

**管理的概念**：应用适当的思想、理论和方法去合理组织资源（人、财、物、技术、信息等）达到某种目标的过程。

**管理的层次**：

- 战略计划层

- 战术管理层

- 业务控制层

**管理的职能**：计划、组织、协调、指挥、控制

- **效率**：用正确的方法做事，以求得最大增量

- **效果**：做正确的事，以求得正的或有价值的成果

- **决策**：选择正确的方法做正确的事情的过程

**决策支持系统（DSS）**：利用计算机分析和模型的能力对管理决策进行支持的系统。其特点是：

1. 目标在于帮助解决结构不良的高层管理决策问题

2. 试图综合应用模型和分析技术，同时也具有传统的数据存储和检索功能

3. 特别注意让不熟悉计算机的用户方便的使用，并采取交互的方式

4. 强调灵活性和适应性，强调适应跟踪用户的决策环境、方式和过程，而不是强调人适应设计者的方式和过程

5. 支持而不是代替人的认识过程

**规划和实施信息系统的考虑因素**：

- 企业的战略和目标

- 企业的组织结构

- 企业的业务流程

- 企业文化

- 企业环境

**信息系统对组织管理的影响**：

1. 管理幅度增宽：一个管理者能指导更多的下属人员

2. 中间管理层缩减：加强操作执行层与高层决策的直接沟通

3. 激励人的全面发展

4. 创建扁平化的组织形式

## 2.2 信息系统与数据、人的关系

**信息系统的基本功能**是为组织的经营管理和决策提供信息和信息处理能力的支持；基本任务是进行数据处理。

**数据平台**：指根据组织的目标对组织的业务进行战略规划，从中析取出组织的基本数据模型，这些数据模型通过数据库等数据处理技术互相建立联系，在这些数据模型的基础上，经过信息系统的处理和变换就可得出大部分组织所需的数据，那么这些数据模型及它们之间的联系即为组织的数据平台。

**人机交互系统**：信息系统处理结构化的问题、频繁的事务；人处理非结构化的问题、偶然发生的事件

信息系统建设队伍中，领导、开发人员、业务人员三者缺一不可，且保持相对稳定

“锦上添花”、“雪中送炭”

## 2.3 信息系统与计算机、软件的关系

**计算机选型原则**：

- 性价比高；与企业业务相适应；主流厂商；符合人机工程学思想

**计算机系统选型要点**：

- 系统结构是否合理、操作系统与应用软件的性能、数据库性能、网络的特点、主机的性能特点、工作站的性能特点、售后、价格、交货时间等

信息系统需要软件的支持，信息系统的核心是软件。

- **软件的三个类别**：系统软件，应用软件，开发软件

## 2.5 信息系统与信息化、EC的关系

**信息化的5个层次**：

1. 产品信息化

2. 企业信息化

3. 产业信息化

4. 国民经济信息化

5. 国家信息化

# 第三章 信息系统的常见应用

## 3.2 MRP、MRPⅡ与ERP

### 1. 独立需求与订货点法

- **定义**：独立需求是一种不能从上一级需求派生出下一级需求的需求类型（连续的）。

- **操作**：设置安全库存，当库存数量达到订货点数量，就发生订货要求。

- **公式**：`OP = D × LT + QS`

- **特点**：只适用于稳定均衡消耗的情况；只能保证均衡消耗的情况下不出现短缺，不保证消耗多变情况下不出现短缺，也无法起到降低库存的作用。

### 2. 相关需求与MRP

- **定义**：相关需求是一种能够从上一级需求派生出下一级物料需求的需求模型（离散的）。

- **操作**：MRP方法是从产品结构、交货期和交货量、零件加工和装配周期、原材料和外协件的采购周期，计算出零部件和原材料等的需求量及交货期。

### 3. 订货点法和MRP方法

- **比较**：

  - 订货点方法是面向独立需求的物料。

  - MRP方法则是面向相关需求的物料。

  - 订货点方法不考虑与其他库存物料之间的关系，而MRP方法着眼于未来的需求并考虑与其他库存物料的关系。

  - 订货点方法完全通过预测来了解需求，MRP方法主要是通过计算来确定需求。

### 4. MRP系统

- **物料需求信息四要素**：需要什么？何时需要？需要多少？何时订货？

- **主要数据**：物料的需求信息、产品结构、提前期、库存信息。

- **系统构成**：

  - 主生产计划模块（MPS）

  - 物料需求计划模块（MRP）

  - 物料清单模块（BOM）

  - 库存控制模块

  - 采购订单模块

  - 加工订单模块

- **产品结构**：可以用物料清单（BOM）的形式表现出来；物料清单（BOM）是MRP系统的基础文件。

### 5. 闭环MRP系统

- **假设**：建立MRP系统的两个假设是生产计划是可行的；物料采购计划是可行的。

- **特点**：闭环MRP系统在MRP的基础上，增加了能力需求计划，使系统具有生产计划与生产能力的平衡过程。通过能力与负荷的反复平衡，实现了一个完整的计划与控制系统。

### 6. MRPⅡ系统

- **主要区别**：运用管理会计的概念，用货币形式说明了执行企业物料计划带来的效益，实现物料信息同资金信息的集成。

- **主要模块**：

  - 产品数据管理模块

  - 主生产计划模块

  - 物料需求计划模块

  - 库存管理模块

  - 能力需求模块

  - 销售管理模块

  - 采购模块

  - 车间作业管理模块

  - 财务管理模块

### 7. ERP系统

- **特点**：

  - 突破了原来只管理企业内部资源的方式，把客户需求、企业内部的经营活动以及供应商的资源融合到一起，体现了完全按市场需求制造的经营思想。

  - 支持物料流通体系的仓库管理以及运输配送管理；

  - 支持在线分析处理；

  - 支持生产保障体系的质量管理等；

  - 支持跨国经营的多国家地区、多工厂、多语种、多币制需求；

  - 支持多种生产类型或混合型制造企业；

  - 支持远程通信、Internet、电子商务、电子数据交换；

  - 支持工作流动态模型变化与信息处理程序命令的集成。

### 8. MRP、MRPⅡ、ERP比较

- **详细比较**：P55

## 3.3 供应链管理与客户关系管理

### 供应链管理（SCM）

- **定义**：供应链是围绕核心企业的，通过对物流、信息流和资金流的控制，从采购原材料开始，制成中间产品以及最终产品，最后由销售网络把产品送到将供应商、制造商、分销商、零售商直到最终用户连成一个整体的功能网络。

- **目的**：对供应链所涉及组织的集成和对物流、信息流、资金流的协同，以满足用户的需求，从而提高供应链整体竞争能力。

- **基本思想**：快速响应、互利共赢。

- **牛鞭效应**：当需求信息不能共享时，每一阶段必须利用前一阶段发出的订单来预测平均需求，这种随着供应链上游前进，需求变动程度增大的现象被称为牛鞭效应。

### 客户关系管理（CRM）

- **定义**：CRM与客户建立起基于学习型关系基础上的一对一营销模式，从而让企业可以最大程度地提高客户满意度及忠诚度，挽回拾取的客户，保留现在的客户，发展新的客户，牢牢把握住能给企业带来最大价值的客户群。

- **思想**：客户是一种重要资源；企业与客户关系的实质是双赢。

- **内容**：

  - 客户信息管理

  - 市场营销管理

  - 销售管理

  - 服务管理与客户关怀

### ERP、SCM、CRM关系

- **详细关系**：P55

## 3.4 知识管理系统与决策支持系统

### 知识管理（KM）

- **定义**：对一个组织集体的知识与技能的捕获，然后将这些知识与技能分布到能够帮助组织实现最大产出的任何地方的过程。

- **目标**：力图能够将最恰当的知识在最恰当的时间传递给对恰当的人，以便使他们能够做出最好的决策。

- **实现方式**：通过采用信息系统和股票期权等技术支持和激励机制，以及设计、构造良好的组织文化和组织结构，发掘固有知识、引导知识更新，实现知识共享，并通过对共享的知识进行有效应用，最终提高组织的竞争力，实现组织的可持续成长。

- **十大内容**：

  - 知识创新管理

  - 知识共享管理

  - 知识应用管理

  - 学习型组织

  - 知识资产管理

  - 知识管理的激励系统

  - 知识管理的技术与工具

  - 知识产品的定价与版本

  - 知识员工的管理

  - 学习与创新训练

- **基本理论**：核心竞争力理论；人力资本理论。

### 决策支持系统（DSS）

- **特征**：

  1. 对准上层管理人员经常面临的结构化程度不高、说明不够充分的问题。

  2. 把模型或分析技术与传统的数据存取技术及检索技术结合起来。

  3. 易于为非计算机专业人员以交互会话的方式使用。

  4. 强调环境及用户决策方法改变的灵活性、适应性。

  5. 支持但不是代替高层决策者制定决策。

  6. 跟踪并适应人的决策过程，而不是要求人去适应系统。

## 3.5 其他常见应用

### CAD（Computer Aided Design，计算机辅助设计）

- **过程**：从计算机绘图到计算机辅助设计，从二维绘图到三维设计，进而到三维集成化设计的过程。

### PDM（Product Data Management，产品数据管理）

- **定义**：以软件技术为基础、以产品为核心，实现对产品相关的信息、过程和资源进行一体化集成管理的技术。

### CIMS（Computer Integrated Manufacturing Systems，计算机集成制造系统）

- **定义**：以计算机为中心的现代化信息技术应用于企业管理与产品开发制造的新一代信息系统。

### EG（Electronic Government，电子政务）

- **定义**：国家各级政府部门综合运用现代信息网络与现代数字，实现政务“四化”的过程（办公自动化，政务科学化，管理一体化，决策科学化）。**电子政务的核心在于政务，而不是电子**


# 第四章 信息系统的战略规划

## 4.1 组织信息化成熟度模型

### 台阶型模型与雷达型模型
信息化成熟度模型的设计思路大体可以分为两类和四个维度：  
- **基础和支撑要素分类**：有两个建模维度，即“信息技术”和“信息资源”。  
- **过程和功能实现分类**：有两个建模维度，即“横向价值链”和“纵向管理链”。  

### 信息化成熟度模型的功能
组织信息化成熟度模型（IMM）应具有以下功能：  
- **导向性功能**  
- **激励性功能**  
- **服务性功能**  

### 信息化成熟度模型（IMM）
1. **技术支撑级（开始信息化）**  
   - 关注：信息技术  
   - 关键状态：基础设施，文档电子化，孤立的信息系统  

2. **资源管理级（认识到信息资源）**  
   - 关注：信息技术，信息资源  
   - 关键状态：局域网建设，数据库规划，业务效率  

3. **管理优化级（设置CIO）**  
   - 关注：信息技术，信息资源，纵向管理链，组织内价值链  
   - 关键状态：组织信息化环境，业务管理优化，业务效益  

4. **战略支持级**  
   - 关注：信息技术，信息资源，纵向管理链，横向价值链  
   - 关键状态：信息战略，核心竞争力，决策支持，上下游协作管理  

5. **持续改善级**  
   - 关注：信息技术，信息资源，纵向管理链，横向价值链  
   - 关键状态：学习型组织，信息文化，创新管理  

---

## 4.2 信息系统建设模式

### 企业信息系统的建设推动力
- **市场竞争压力**  
- **信息技术的扩散渗透**

### 建设模式分类
1. **企业——行业互动模式**  
   企业信息系统建设与行业信息化之间存在相互促进与约束的互动关系。行业内领头羊企业的建设既带来示范效应，也给其他企业带来威胁，促使同行业企业学习和模仿。  

2. **挑战——反应模式**  
   主动应对未来挑战，积极建设信息系统，适用于行业内的领头羊企业。  

3. **雁行模式**  
   由于信息技术发展过快且投资风险高，许多企业更愿意“跟跑”而非“领跑”。  
   - 分类：行业内企业间雁行模式、企业内雁行模式、行业间雁行模式、地区内雁行模式。  

4. **地域互动模式**  
   由于区域政府推动、有利环境条件等地域因素的影响，形成的企业信息系统建设模式。

---

## 4.3 信息系统总体规划

### 信息系统的生命周期
1. 系统规划  
2. 系统分析  
3. 系统设计  
4. 系统实施  
5. 系统运行维护  
6. 系统规划（循环）

### 各阶段简介
1. **系统规划阶段**  
   编写新系统建设方案及实施计划，形成系统设计任务书。  

2. **系统分析阶段**  
   - 工作成果：系统分析说明书。  
   - 内容：指出现行系统局限性，确定新系统的基本目标和逻辑功能要求。  

3. **系统设计阶段**  
   - 依据系统分析说明书，设计实现逻辑模型的技术方案，即新系统的物理模型。  
   - 输出文档：系统设计说明书。  

4. **系统实施阶段**  
   - 特点：多个任务同时展开，需精心安排、合理组织。  
   - 输出文档：实施进度报告、系统测试分析报告。  

5. **系统运行维护阶段**  
   - 对难以修改的问题记录在案，定期整理成新需求建议书，为下一周期的规划做准备。  

### 信息系统规划的原因
1. 信息系统是企业战略规划的重要组成部分。  
2. 信息技术发展迅速，风险高，规划不足可能导致失败。  
3. 信息是企业重要资源，规划可提高共享和利用效率。

### 信息系统总体规划内容
1. 总目标和发展战略  
2. 当前信息系统与管理状况  
3. 信息技术发展的预测  

### 信息系统总体规划方法
1. **关键成功因素法（CSF）**  
   - 步骤：识别目标、关键因素、性能标准、测量数据。  
   - 工具：树枝因果图。  

2. **战略目标转化法（SST）**  
   - 将企业战略目标转化为信息系统战略目标，反映全面性。  

3. **企业系统规划法（BSP）**  
   - 步骤：定义企业目标、识别企业过程、定义数据类、定义信息结构。  

4. **CSB综合法**  
   - 将CSF、SST、BSP结合，弥补单一方法的不足。

---

## 4.4 可行性研究

### 信息系统需求分类
1. **功能性需求**  
   - 核心需求（A类：必须做什么）  
   - 应做需求（B类：应该做什么）  
   - 期望需求（C类：可以做什么）  

2. **非功能性需求**  
   性能、可靠性、安全性、适应性等。

### 信息系统需求分析步骤
1. 抽象信息和信息处理要求。  
2. 确定定量标准。  
3. 分析需求间的关系，抓住实质需求。  

### 信息收集方法
1. 查阅书面资料  
2. 实地观察  
3. 用户访谈  
4. 调查表  
5. 业务专题报告  

### 可行性研究
1. 评估可能性、必要性（技术、经济、社会因素）。  
2. 研究报告结果可能得出不可行结论，这属正常现象。  

### 注意事项
P91“高估收益，低估成本”——对于项目的收益，人们往往把引进信息系统后所增加的信息处理的能力，与实际发展出来的效益混为一谈。当我们引进计算机或其他新技术的时候，只是使信息系统在某一环节增加了处理能力。


# 第五章 信息系统的前期准备

## 5.1 开发方式选择

### 信息技术外包（IT Outsourcing）
指组织通过合同形式委托信息技术服务商提供部分或全部的信息功能。

### 信息系统开发外包的类型
1. **联合开发**（次之）  
2. **委托开发**（最贵）  
3. **购买套装软件**（便宜）

### 信息系统开发外包的优势
- 资源重新分配，加强非IT业务投资，有助于强化组织核心竞争力，提升外界应对能力。  
- 缓解信息技术人才不足问题，引入最新技术，解决组织内技术退化难题。  
- 由专业服务商提供服务，提高开发效率，节约开发成本等。  

**更多比较见：P94**

---

## 5.2 合同签订和项目启动

### 合同类型
1. **固定价格合同**：开发方承担高风险。  
2. **成本补偿合同**：企业承担高风险。

### 合同条款注意事项
- 成本超支或进度延迟的通知条款  
- 分包商限制条款  
- 企业配合义务条款  
- 知识产权条款  
- 保密协定条款  
- 付款方式条款  
- 奖罚条款  
- 需求变更条款  
- 纠纷解决条款  

### 项目组组织结构
1. **按职能**：基于信息技术职能划分。  
2. **按系统**：基于子项目或业务子系统划分。  
3. **矩阵型模式**：结合职能与系统的方式。  

### 强势用户对项目控制的加强

#### 加强自身控制能力
- 建立适用的项目实施方法论。  
- 组建配合团队，部分人员可脱产全力配合开发方。  
- 制定项目长期规划。  
- 设立问题管理程序。  
- 组织测试和系统验收。  
- 双方共同分析评估成果。  

#### 加强对乙方的控制能力
- 要求开发方派驻人员在用户方工作。  
- 制定明确的项目计划。  
- 定期组织碰头会。  
- 对开发方工作施加潜在压力。  
- 组织短期集中突击工作。  
- 对开发方进行培训。  
- 在各阶段要求开发方高管参与并设立奖惩机制。  

### 乙方应对强势用户的策略
- 提交明确项目计划。  
- 主动要求驻用户方工作。  
- 定期提交周报/月报，确保用户方了解进展。  
- 组织阶段性成果展示会，邀请高管参与。  
- 通过电话或邮件主动与用户方沟通。  
- 举办交流或聚会增进合作关系。  

---

## 5.3 业务流程规范化和优化

- **指标体系规范化**  
- **代码标准化**  
- **业务流程规范化**  

### 业务流程管理相关概念
1. **业务流程管理（BPM）**  
2. **企业流程改进（BPI）**  
3. **企业流程重组（BPR）**  

### BPI的ECRS改进四原则
1. **Eliminate（排除）**：去除不必要功能。  
2. **Combine（合并）**：无法排除的功能考虑合并。  
3. **Rearrange（重排）**：调整功能顺序。  
4. **Simplify（简化）**：尽量简化流程。

---

## 5.4 信息系统开发方式选择

### C/S（Client/Server）模式

#### 缺点
1. 开发成本高，客户端软硬件要求高，升级增加成本。  
2. 移植困难，不同工具开发的程序互不兼容。  
3. 客户端安装子系统软件，界面风格不统一，操作复杂。  
4. 客户端需安装应用程序，维护复杂，升级麻烦。  

#### 优点
- 即时反应  
- 安全性高  

---

### B/S（Browser/Server）模式

#### 优点
1. **使用简单**：只需使用浏览器，无需培训。  
2. **易于维护**：应用程序集中在服务器端，升级维护集中化。  
3. **保护企业投资**：采用标准协议，兼容现有网络。  
4. **客户端硬件要求低**：仅需浏览器软件。  
5. **信息共享高**：通过Intranet实现内外部资源的便捷访问。  
6. **扩展性好**：支持直接连接Internet。  

---

### B/S与C/S结合模式
- **B/S模式**：面向大量用户的模块，使用三层结构，基础数据集中在高性能数据库服务器上，中间通过Web服务器与客户机交互。  
- **C/S模式**：对于安全性要求高、交互性强、数据处理量大、查询灵活的模块，采用C/S结构，发挥各自优势。

# 第六章 生命周期法与原型法

## 6.1 生命周期法的基本思想

### 广义定义
任何一个系统都有其生存期，从信息系统建设项目的提出，经历分析、设计、研制、运行和维护，直至退出的整个时期。

### 狭义定义
指自顶向下结构化方法、工程化系统开发方法与生命周期方法的结合，又称结构化生命周期法，简称**结构化方法**。

### 结构化方法的基本原则
1. **面向用户的观点**  
2. **严格区分工作阶段**，每阶段有明确任务和成果  
3. **系统化观点**，自顶向下完成系统研制  
4. **充分考虑变化**  
5. **成果文献化与标准化**  

### 结构化方法的不足与局限
1. 开发周期长，难以适应环境变化  
2. 早期方法侧重系统功能，兼顾数据结构不足  
3. 开发初期难以锁定低层系统功能要求  

---

## 6.2 系统分析

### 系统分析的意义
系统分析是信息系统研制中**最重要且最困难的阶段**。主要困难包括：  
1. **问题空间的理解**  
2. **人与人之间的通信障碍**  
3. **环境的不断变化**  

### 系统分析阶段的任务
1. 调查分析用户单位业务流程  
2. 抽象出新系统概念模型  
3. 锁定系统边界、功能、处理过程和信息结构  
4. 为系统设计奠定基础  

系统分析员需与用户深入交流，充分理解需求，并通过书面文档（**系统分析说明书**）表达双方理解。

#### 数据流图（见P119）
- **数据字典**：包含数据元素、数据结构、数据流、数据存储、外部实体、处理过程的定义。

---

## 6.3 系统设计

### 系统设计阶段的目标
- 明确系统功能  
- 形成系统的逻辑模型  

### 概要设计的任务
1. 系统模块划分  
2. 决定模块功能  
3. 明确模块调用关系  
4. 定义模块界面（信息传递方式）  

### 总体设计
从**数据流图**导出**结构图**。

### 详细设计的内容
1. **代码设计**  
2. **数据库设计**  
3. **输入设计**  
4. **输出设计**  
5. **人机对话设计**  
6. **处理过程设计**  

---

## 6.4 系统实施

系统实施的步骤：
1. 硬件准备  
2. 软件准备  
3. 人员培训  
4. 数据准备  

采用**自顶向下的实现方法**。

---

## 6.5 原型法

### 原型法的核心思想
在限定时间内，用最经济的方法构建系统原型，让用户尽早看到未来系统概貌，通过运行与用户共同发现问题、提出修改建议，并不断完善原型，逐步满足用户需求。

### 原型法的步骤
1. 明确用户基本信息需求  
2. 建立初始原型  
3. 评价原型  
4. 修改与完善原型  

### 原型法的优点
1. 增进用户与开发人员的沟通  
2. 用户在开发中起主导作用  
3. 辨识动态用户需求  
4. 启发用户衍生需求  
5. 缩短开发周期，降低开发风险  

---

## 生命周期法与原型法适用条件

### 有利于生命周期法开发的因素
1. 用户需求定义明确  
2. 系统运行程序确定，结构化程度高  
3. 系统寿命较长，环境变化较小  
4. 开发过程需严格控制  
5. 研制人员熟悉系统任务  
6. 系统文档要求详细  
7. 开发成果可重复使用  

### 有利于原型法开发的因素
1. 用户需求不明确  
2. 过程非结构化  
3. 环境易变  
4. 系统寿命较短  
5. 使用第四代语言工具开发  
6. 需在短期内投入运行  
7. 缺乏可借鉴的开发成果  


# 第七章 面向对象开发方法

## 对象
- **定义**：由一组数据（描述事物的属性）和作用于数据的操作（体现事物行为，称为方法）构成的独立整体。  
- **消息传递**：对象之间通过传递消息（message）联系。当消息发送给某对象时，该消息包含要求接收对象执行某些活动的信息。  
  接收到消息的对象会解释并响应，这种通信机制称为**消息传递**。

## 类
- **定义**：相同属性和行为的多个对象的集合。  
  类描述共性，而具体对象是类的一个实例（instance）。  
- **层次结构**：类可以有子类和父类，形成层次结构。  
  **继承**（inheritance）是父类与子类之间共享数据和方法的机制。

## 方法
- **定义**：对象能执行的操作，即类中定义的服务。  
  - 描述了对象执行操作的算法和响应消息的方式。  
  - 方法封装在对象内部，用户只需调用方法并查看结果，这体现了**封装性（encapsulation）**。

## 面向对象的基本思想
- 从现实世界的客观事物出发构造软件系统。  
- 核心特性：  
  1. **抽象性（abstraction）**  
  2. **封装性（encapsulation）**  
  3. **继承性（inheritance）**  
  4. **多态性（polymorphism）**  
  5. **易维护性**

## 开发过程
1. 系统调查与需求分析  
2. 分析问题性质与求解问题  
3. 整理问题  
4. 程序实现  

## UML（统一建模语言）
1. **结构图**：如类图等  
2. **行为图**：如用例图等  

---

# 第八章 信息系统建设的项目管理

## 8.1 信息系统与项目管理

### 项目
在一定资源约束下完成既定目标的一次性任务。

### 项目管理
- **定义**：通过项目经理和项目组织的努力，运用系统理论与方法，对项目及其资源进行计划、组织、指挥、协调、控制，旨在实现项目特定目标的管理方法体系。  
- **目的**：实现**任务多、进度快、质量好、成本省**的统一。

### 信息系统项目特点
1. **目标不精确**：任务边界模糊，质量要求更多由项目团队定义。  
2. **需求动态变化**：客户需求会不断明确，导致进度与费用计划的调整。  
3. **人力资源依赖高**：项目成员的结构、责任心、能力及稳定性对项目质量和成功至关重要。

---

## 8.2 信息系统项目的费用与进度管理

### 1. 成本的构成与测算
信息系统项目成本测算需基于生命周期各阶段的成本特征，结合定量与定性分析方法，科学估算成本水平与变动趋势。  
- **重点**：软件开发成本。  
- **经验系数**：  
  - 运行维护期3年：开发 : 维护 = 7 : 3  
  - 运行维护期4年：开发 : 维护 = 6 : 4  
  - 运行维护期5年：开发 : 维护 = 5 : 5  
  - 完全定制化开发：软件 : 硬件 : 其他 = 2 : 1 : 1  
  - 套装软件：软件 : 硬件 : 其他 = 1 : 1 : 1  

### 2. 软件规模与成本估算
1. 参照类似项目估算软件开发成本与工作量。  
2. 分解项目为子系统，估算子系统成本后汇总整体成本。  
3. 按生命周期阶段分解估算成本与工作量后汇总。  
4. 使用经验公式基于历史数据或实验数据估算。  

- **软件度量方式**：代码行方式、功能点方式  
- **期望值公式**：  
  e = (a + 4m + b) / 6
  其中：  
  \(e\)：期望值  
  \(a\)：乐观值  
  \(b\)：悲观值  
  \(m\)：一般值  

### 3. 进度与成本计划
- 建立项目团队、绘制知识地图、设计工作分析结构（WBS图）。  
- **WBS图**：分解信息系统项目为易于管理的细目，最低层细目称为**工作包**。  
- 使用甘特图或项目网络图规划进度。  

#### 关键路径法
- **前通法**：计算最早开始时间（ES）与最早结束时间（EF）。  
- **后通法**：计算最迟开始时间（LS）与最迟结束时间（LF）。  
- **Slack计算**：  
	-Slack = LF - EF      或   Slack = LS - ES
  **关键路径**是耗时最长的路径。

### 4. 计划变更与控制
- **时间-成本平衡法**：以最低相关成本缩短工期。  
- **挣值分析法**：  
  - **预算值（PV）**  
  - **实际成本（AC）**  
  - **挣值（EV）**  
  - 差异公式：  
	成本差CV = EV - AC   | 进度差SV = EV - PV
	成本效率CPI = EV / AC   |  进度效率SPI = EV / PV

---

## 8.3 信息系统项目的人力资源管理

### 人力资源管理重点
- **人员-进度权衡定律**  
- **Brooks定律**：增加人员可能延误项目进度。  
- **人力资源平衡**：通过合理分配团队资源实现最佳效果。  

### 团队成长与激励阶段
1. 形成  
2. 震荡  
3. 正规  
4. 表现  

---

## 8.4 信息系统项目的质量管理

### 全面质量控制
质量管理贯穿系统分析、设计、实现阶段，包括：
1. 文档、开发人员及用户培训的质量控制  
2. 工程化开发方法  
3. 阶段性冻结与改动控制  
4. 里程碑式审查与版本管理  
5. 面向用户参与的开发方式  
6. 外部监理与审计  
7. 面向对象与基于构件的方法开发  
8. 持续改善（按CMM要求）  
9. 全面测试  

# 第九章 信息系统建设的文档管理

## 9.1 信息系统文档的作用与类型

文档是信息系统的一部分，用于表达用户需求、制定方案、进行系统分析与设计、支持系统运行维护等，甚至在谈判中起到重要作用。

**分类：**  
- 按频率：一次性文档、非一次性文档  
- 按生命周期阶段：各阶段对应的文档  
- 按服务目的：用户文档、开发文档、管理文档  

---

## 9.2 信息系统各类文档的内容

**主要文档：**  
1. 可行性研究报告  
2. 系统开发立项报告  
3. 系统开发计划书  
4. 系统分析说明书  
5. 系统设计说明书  
6. 程序设计报告  
7. 系统测试计划与测试报告  
8. 系统使用与维护手册  
9. 系统评价报告  
10. 系统开发月报与系统开发总结报告  

---

## 9.3 信息系统文档的编制与管理

**文档质量差的原因：**  
1. **认识问题：** 不重视文档编写工作  
2. **规范问题：** 编写随意性大，缺乏规范  
3. **技术问题：** 缺乏经验或安排不当  
4. **评价问题：** 缺乏评价标准  

**高质量文档的特点：**  
- 针对性  
- 精确性与统一性  
- 清晰性  
- 完整性  
- 灵活性  
- 可追溯性  
- 易检索性  

**文档管理措施：**  
1. 制度化管理  
2. 标准化与规范化  
3. 人员保障  
4. 维护文档一致性  
5. 保持可追踪性  

---

# 第十章 信息系统的监理、审计与评价

## 10.1 信息系统监理与经济学依据

**委托-代理理论**  
- **刺激一致性条件：** 激励机制保证委托人和代理人目标一致。  
- **参与条件：** 代理人的收益不能低于某个预期值。  
- **收益最大化条件：** 合同执行后，委托人收益最大化。

**监理目标：**  
- 对乙方（开发方）：监督与管理，重在监督  
- 对甲方（用户方）：督促与协助，重在协助  

**开发方与监理方的关注点：**  
- **开发方：** 成本 > 进度 > 质量  
- **监理方：** 质量 > 进度 > 成本  

---

## 10.2 信息系统监理的内容

**监理形式：**  
1. 咨询式监理  
2. 里程碑式监理  
3. 全程式监理  

**监理内容：**  
- 协助招标与评标  
- 协助签订开发合同  
- 监督合同履行  
- 提供技术服务  
- 提交监理工作报告  

---

## 10.3 信息系统审计

**审计内容：**  
1. 数据文件审计  
2. 应用程序审计  
3. 处理系统综合审计  
4. 内部控制制度审计  
5. 信息系统开发审计  

---

# 第十一章 信息系统的测试

## 信息系统测试

**分类：**  
1. 静态测试与动态测试  
2. 黑盒测试与白盒测试  
3. 手工测试与自动测试  
4. 单元测试、集成测试、确认测试、系统测试  

**测试原则：**  
1. 尽早进行测试  
2. 避免由开发者执行测试  
3. 确定输入数据和输出结果  
4. 包含有效与无效输入条件  
5. 检测程序是否做了不该做的事  
6. 重视测试中的群集现象  
7. 避免随意性，按计划测试  
8. 保存测试用例  

---

## 黑盒测试与白盒测试

**黑盒测试：**  
- 检测功能是否正常使用  
- **优点：**  
  1. 简单，不需要了解程序内部  
  2. 从用户角度发现问题  
  3. 易于自动化测试  
- **缺点：**  
  1. 覆盖率低，约30%  
  2. 自动化测试复用性低  

**白盒测试：**  
- 基于代码检测  
- **优点：**  
  1. 提高代码覆盖率  
  2. 发现隐藏问题  
- **缺点：**  
  1. 测试路径多，开销大  
  2. 难以检测设计需求  

---

# 第十二章 信息系统的运行管理

## 12.1 信息系统运行制度  

- 信息收集整理制度  
- 信息录入制度  
- 信息更新制度  
- 信息共享制度  
- 信息报告制度  
- 信息人才培养制度  

---

## 12.2 信息系统安全制度

- 硬件资源安全制度  
- 软件资源安全制度  
- 其他资源安全制度（人员调离等）  

---

## 12.3 CIO知识体系与职责  

**CIO职责：**  
1. 参与组织发展战略的制定  
2. 制定信息政策、标准和制度  
3. 培育信息文化  
4. 提升信息素质与能力  
5. 提供决策支持  
6. 规划信息系统项目  
7. 监控系统项目与运行  
8. 为业务部门提供咨询与服务  
9. 提升产品或服务的价值  
10. 总结经验贡献行业发展  

## 第八章：面向对象的分析与设计方法

传统的功能分解方法只能单纯反应管理功能的结构形态，数据流程模型只能侧重反映事物的信息特征和流程。这意味着数据和功能是孤立和分开的，而面向对象将数据和功能整合到了一起。

```java

A a = 2 小明 A.sum1

//要实现 a+1

B b = 3 小芳 B.sum2

//面向过程的方法 a加1

B.

```

```java

int a = 2

//要实现 a+1

//面向对象的方法

a.sum(1)

b.sum(2)

```

**差别一：侧重点不同**

面向过程：通常是这种形式：动作（主语，宾语） ，**动作是主要的**，主语和宾语分别作为参数传入进行计算，并且主语在整个过程中不重要！

面向对象：强调动作发生的**主体**（现实世界中的实体），是这个主语调用了特定的动作，再把宾语作为参数实现运算。

**差别二：定义方式不同**

面向过程只要定义一个函数sum，指定它有两个参数，然后return二者的和即可

面向对象则复杂一些。首先要定义一个类，在这个类中定义这个类别可以使用的各种方法（可以理解为函数）。然后产生一个类的实例，用这个实例调用这个方法完成计算

举一个通俗的例子。比如定义一个“鸟”类，再指定这个类有“飞翔”这个方法（即函数、动作）。然后我们抓到一只具体的鸟，这只鸟就是“鸟”类的一个实例，它就可以调用“飞翔”这个方法。如果拉过来一只狗，它不属于“鸟”类，就不能调用“飞翔”这个方法。狗可能属于“狗”类，经过定义就可以调用“叫”这个方法。

在sum的例子中，a是一个整数，它是”整数“这个类的一个实例，你也可以定义b=3则是另外一个实例。它们就具备”整数“这个类可以使用的所有方法，比如加一个数，减一个数之类的。而如果 c="hello"，它就属于“字符串”这个类，可以调用字符串的方法

这样做有一个好处，相当于**自动对变量进行分类**，每一个变量都是一个对象，属于一个特定的类，它可以调用的方法也都是固定的，这样我们拿到一个变量，就知道可以对它进行哪些处理。

**差别三：调用**

在实际使用中，如果要对许多对象进行相同的操作

- 面向过程就是定义一个函数，或者许多函数，然后对每一个对象都套用这个函数即可实现

- 而面向对象则是定义一个类，指定类的方法，然后每一个对象创建为这个类的实例，实例再调用方法进行计算

当这种需求多起来

- 面向过程会出现这种情况，**今天对A类数据创建了一些函数，明天对B类数据创建了另外一些函数**，可能第二天的函数还调用了第一天的函数，函数全部放在一起，拿到数据看哪个好用就拿来用，这样容易乱套。而且每次拿到一个数据都要审视一下之前的这个函数可以处理这个数据吗，处理完可以得到想要的结果吗

- 而面向对象则每一个类型的对象的方法都放在一起进行管理，都在这个类之下进行定义，这样我们只要看这个对象是这个类的，就自然可以调用这个类的方法。

### 面向对象的基本概念

1.类 Person

2.对象 Zhu

3.方法 Zhu.study()

4.属性

### 面向对象三大特点：

1.继承

减少代码和数据的重复冗余度，大大增强程序复用性

2.封装

内部的属性全部设置为private，只提供public的get、set方法用于修改属性值

既提供了服务，又保护自己不轻易受外界影响，增加安全性。

```java

public class shark{

    private int age; //属性全部设置为私有，想访问，用get，set方法访问，并且在getset里加上权限鉴定

    public int getAge(){

        if(有权限){

            return this.age;

        }

        else:

             return "您无权限获取这条鱼的年龄！"

    }

    public void setAge(int age){

        this.age = age;

    }

    public void setAge(String age){

        this.age = Integer.parseInt(age);

    }

    /*

    public int setAge(int age){

        this.age = age;

        return age

    }*/

}

s.setAge(5); //将5赋值给了age

s.setAge("5"); //将"5"转化成5，赋值给了age

Map m;

Map

Hashmap extends Map

Map:抽象类

Map<Integer,Integer> m = new Hashmap<>();

UtilMap<Integer,String> u = new Hashmap<>();

int a = 1;

int b = 2;

String s1 = "你"

String s2 = "好"

print(a + b) //int 执行相加

print(s1 + s2) //string 执行字符串拼接

```

3.多态

相同的操作可作用于多种类型的对象，并且获得不同的结果

例如，字符串变量相加，效果是拼接，数值型变量相加，效果是求和，对他们执行相同的操作（+），效果不同。

多态的本质是方法重载（操作符重载），功能的重载，方法重载必须是参数类型不同，不能是相同参数类型，返回值类型不同

### 面向对象方法优点

1.代码可重用性好（继承，多态）

2.可维护性和可扩充性好

3.稳定性好（封装）

### 面向对象开发的过程

**OOA**，面向对象分析(Object Oriented Analysis ) 的目的是获得对应问题的理解。

理解的目的是确定系统功能和性能要求。面向对象分析技术可以将系统的行为和信息的关系表示为迭代构造函数。

面向对象分析包括五个活动：确定类和对象，确定结构，确定主题，确定属性，确定服务

UML图就是在面向对象分析时，常用到的工具

**OOD**，面向对象的设计(Object Oriented Design) 的含义是设计分析模型，确定数据库，输入输出，人机界面交互等，类似于结构化生命周期法中的系统设计

**OOP**，面向对象的编程 　Object Oriented Programming 实质是选用一种面向对象程序设计语言OOPL(Object Oriented Programming Language),采用对象，类以及相关概念所进行的程序设计。关键是加入了类和继承性，从而提高了抽象程度。

没有明确边界